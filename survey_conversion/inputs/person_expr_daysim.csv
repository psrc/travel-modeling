index,table ,filter,result_col,result_value,description
1,person,person['employment'] == employment_full_time,pptyp,1,full-time worker
2,person,(person['employment'] == employment_selfemployed) & (person['hours_work'].isin(full_time_hours_list)),pptyp,1,self-employed with minimum work hours classified full-time worker
3,person,person['employment'] == employment_part_time,pptyp,2,part-time worker
4,person,(person['employment'] == employment_selfemployed) & (person['hours_work'].isin(full_time_hours_list)),pptyp,2,self-employed with less than minimum work hours classified part-time worker
5,person,"(person['worker'] != is_worker) & (person['age'].isin([age_65_74,age_75_84,age_85_plus]))",pptyp,3,Non-working adult age over 65
6,person,"(person['worker'] != is_worker) & (person['age'].isin([age_18_24,age_25_34,age_35_44,age_45_54,age_55_64]))",pptyp,4,Non working adult age <65
7,person,"(person['schooltype'].isin([schooltype_college,schooltype_vocational])) & (person['student'] == student_full_time)",pptyp,5,University student (full-time)
8,person,"(~person['age'].isin([age_under_5,age_5_11,age_12_15])) & (person['schooltype'].isin([schooltype_homeschool,schooltype_public_k12,schooltype_private_k12]))",pptyp,6,High school student age 16+
9,person,"person['age'].isin([age_5_11,age_12_15])",pptyp,7,Child age 5-15
10,person,person['age']==age_under_5,pptyp,8,Child Under 5
11,person,person['pptyp'].isnull(),pptyp,-1,Assign any missing person -1 value as missing logic flag
12,person,(person['age'].isin([age_16_17])) & (person['pptyp'] == -1),pptyp,-1,Assume anyone 16-17 is a student if they have missing school data
13,person,person['employment'].isin([employment_full_time]),pwtyp,1,Full time worker
14,person,person['employment'].isin([employment_part_time]),pwtyp,2,Part time worker
15,person,"~person['employment'].isin([employment_full_time,employment_part_time])",pwtyp,0,Non-worker
16,person,:,ptpass,0,Default of no transit pass availability
17,person,"(person['tran_pass_12'].isin([transit_pass_yes_all_paid,transit_pass_yes_part_paid])) | (person['benefits_3'].isin([transit_benefits_offered_used]))",ptpass,1,
18,person,:,ppaidprk,0,Default of assuming no parking cost unless otherwise specified
19,person,"person['workpass'].isin([work_parking_free,work_parking_na,work_parking_employer_pays_all])",ppaidprk,0,"This row is redundant, remove?"
20,person,"person['workpass'].isin([work_parking_employer_pays_some,work_parking_worker_pays_all_daily,work_parking_worker_pays_all_pass])",ppaidprk,1,
21,person,:,puwmode,person['commute_mode'].map(commute_mode_dict),
22,person,person['puwmode'].isnull(),puwmode,commute_mode_dict['null'],
23,person,:,pagey,person['age'].map(age_map),
24,person,:,pgend,person['gender'].map(gender_map),
25,person,:,pstyp,person['student'].map(pstyp_map),
26,person,:,pstyp,person['pstyp'].fillna(0),
27,person,:,hhno,person['household_id'],
28,person,:,pno,person['person_id'].astype('str').apply(lambda x: x[-2:]).astype('int'),"Extract from person ID field, which appends the person number to the household on the last 2 columns"
29,person,:,psexpfac,person[person_weight_col],
30,person,:,pwtaz,person['work_taz'],
34,person,:,pstaz,person['school_loc_taz'],
35,person,:,pwpcl,person['work_parcel'],
36,person,:,pspcl,person['school_loc_parcel'],
